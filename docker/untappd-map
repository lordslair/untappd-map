#!/usr/bin/perl
use strict;
use warnings;

use File::Pid;
use Image::LibRSVG;

use lib '/code/lib';
use UTM::Untappd;
use UTM::Choropleth;
use UTM::Twitter;

my $daemonName    = "untappd-map";
my $dieNow        = 0;                                     # used for "infinte loop" construct - allows daemon mode to gracefully exit
my $sleepMainLoop = 300;                                   # number of seconds to wait between "do something" execution after queue is clear
my $logging       = 1;                                     # 1= logging is on
my $pidFilePath   = "/var/run/";                           # PID file path
my $pidFile       = $pidFilePath . $daemonName . ".pid";

# Funny stuff
my $EMOJIko = "\e[31m".':o('."\e[0m";
my $EMOJIok = "\e[32m".':o)'."\e[0m";

# daemonize
chdir '/';
umask 0;

# callback signal handler for signals.
$SIG{INT} = $SIG{TERM} = $SIG{HUP} = \&signalHandler;
$SIG{PIPE} = 'ignore';

# create pid file in /var/run/
my $pidfile = File::Pid->new( { file => $pidFile, } );
   $pidfile->write or die "Can't write PID file, /dev/null: $!";

logEntry("Starting daemon");

my $loop;
# "infinite" loop where some useful process happens
until ($dieNow) {
    sleep($sleepMainLoop);

    $loop++;
    logEntry("$EMOJIok Entering loop $loop");
    my $Mentions;

    eval
    {
        $Mentions = UTM::Twitter::getMentions or die "Failed to getMentions $!";
        1;
    } or do {
        my $error = $@ || 'Unknown failure';
        chomp ($error);
        logEntry("$EMOJIko ERROR: $error");
        next;
    };

    foreach my $id ( sort keys %{$Mentions} )
    {
        my $username;

        if ( $Mentions->{$id}{'replied'} )
        { #We don't do this one
        }
        else
        {
            # Mentions should have this format : "@UntappdMap !<UntappdUsername>"
            if ( $Mentions->{$id}{'text'} =~ m/^\@UntappdMap/ )
            {
                if ( $Mentions->{$id}{'text'} =~ m/[!](\w*)/ )
                {
                    logEntry("  Got a not yet replied mention ($Mentions->{$id}{'text'})" );
                    $username = $1;
                    logEntry("[$username]    Got to reply" );
                }
            }
        }

        if ( $username )
        {
            my $Country_ref = UTM::Untappd::getData($username);
            my %Country     = %{$Country_ref};
            if ( $Country_ref ) { logEntry("[$username]    Got %Country" ) }

            if ( keys %Country <= 0 )
            { # If something bad happened in getData, we do nothing, and skip to next mention
                logEntry("[$username]    Got nothing, probably wrong reply from Untappd" );
                last;
            }

            my $biggest     = 0;
            my $input_file  = '/code/data/BlankMap-World6.svg';
            my $output_file = "/code/data/$username.svg";

            foreach my $country ( sort keys %Country )
            {
                if ( $biggest < $Country{$country}{'count'} ) { $biggest = $Country{$country}{'count'} }
            }

               $Country_ref         = \%Country;
            my $Coded_Country_ref   = UTM::Choropleth::Code($Country_ref);
            if ( $Coded_Country_ref ) { logEntry("[$username]    Got %Coded_Country" ) }
            my $Colored_Country_ref = UTM::Choropleth::Colorize($Coded_Country_ref,$biggest);
            if ( $Colored_Country_ref ) { logEntry("[$username]    Got %Colored_Country" ) }

            UTM::Choropleth::Draw($Colored_Country_ref,$input_file,$output_file) or die "Failed to Draw $!";
            logEntry("[$username]    Choropleth::Draw requested" );

            my $rsvg = new Image::LibRSVG();
               $rsvg->convertAtSize($output_file, "$output_file.png", 2560, 1314) or die "Failed to convertAtSize $!";
            logEntry("[$username]    PNG converted" );

            my $twitter_name =  UTM::Twitter::SenderName($Mentions->{$id}{'sender_id'}) or die "Failed to SenderName $!";
            logEntry("[$username]    Will send to \@$twitter_name" );

            my $text       = "\@" . $twitter_name . " Kudos, and there\'s your map \\o/";
            my $update_ref = UTM::Twitter::SendTweetMedia( $id, $text, "$output_file.png") or die "Failed toSendTweetMedia $!";
            my %update     = %{$update_ref};
            logEntry("[$username]    Tweet sent (reply_id:$id) [$update{'id'}]" );

            my $top     = UTM::Choropleth::Top($username, $Coded_Country_ref);
            my $message = "\@" . $twitter_name . "\n" . $top;
            UTM::Twitter::SendTweet( $update{'id'}, $message) or die "Failed toSendTweet $!";
            logEntry("[$username]    Top10 sent (reply_id:$update{'id'})" );
        }
    }
}

# add a line to the log file
sub logEntry {
    my ($logText) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) = localtime(time);
    my $dateTime = sprintf "%4d-%02d-%02d %02d:%02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min, $sec;
    if ($logging) {
        binmode(STDERR, ":utf8");
        print STDERR "$dateTime $logText\n";
    }
}

# catch signals and end the program if one is caught.
sub signalHandler {
    open DATA, "/code/test/getTwitterRateLimit.pl |" or die "Couldn't execute program: $!";
        while ( defined( my $line = <DATA> )  )
        {
            chomp($line);
            logEntry($line);
        }
    close DATA;
    logEntry("Stop signal caught");
    $dieNow = 1;    # this will cause the "infinite loop" to exit
}

# do this stuff when exit() is called.
END {
    if ($logging)
    {
        logEntry("Stopping daemon");
    }
    $pidfile->remove if defined $pidfile;
}
